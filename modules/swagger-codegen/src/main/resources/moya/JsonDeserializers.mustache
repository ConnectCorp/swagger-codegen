// JsonJsonDeserializers.swift
//
// Generated by swagger-codegen
// https://github.com/ConnectCorp/swagger-codegen
//

import Foundation

private var once = dispatch_once_t()

public class JsonDeserializers {

    static private var deserializers = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDeserializer<T>(type type: T.Type, deserializer: ((AnyObject) -> T)) {
        deserializers["\(T.self)"] = { deserializer($0) as! AnyObject }
    }

    public static func deserialize<T>(type type: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]

        return array.map { JsonDeserializers.deserialize(type: T.self, source: $0) }
    }

    public static func deserialize<T, Key: Hashable>(type type: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let json = source as! [Key:AnyObject]

        var dict = [Key:T]()

        for (key, value) in json {
            dict[key] = JsonDeserializers.deserialize(type: T.self, source: value)
        }

        return dict
    }

    public static func deserialize<T>(type type: T.Type, source: AnyObject) -> T {
        initialize()

        if source is T {
            return source as! T
        }

        if let deserializer = deserializers["\(T.self)"] {
            return deserializer(source) as! T
        } else {
            fatalError("\(source) is not convertible to \(type)")
        }
    }

    static func deserializeOptional<T>(type type: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }

        return source.map { (source: AnyObject) -> T in
            JsonDeserializers.deserialize(type: type, source: source)
        }
    }

    static func deserializeOptional<T>(type type: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }

        return source.map { (source: AnyObject) -> [T] in
            JsonDeserializers.deserialize(type: type, source: source)
        }
    }

    static func deserializeOptional<T, Key: Hashable>(type type: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }

        return source.map { (source: AnyObject) -> [Key:T] in
            JsonDeserializers.deserialize(type: type, source: source)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format

                return formatter
            }

            // NSDate
            JsonDeserializers.addDeserializer(type: NSDate.self) { (source: AnyObject) -> NSDate in
                if let str = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(str) {
                            return date
                        }
                    }
                }

                if let i = source as? Int {
                    return NSDate(timeIntervalSince1970: Double(i / 1000))
                }

                fatalError("Formatter failed to parse \(source)")
            }
            {{#models}}{{#model}}

            // {{classname}}
            JsonDeserializers.addDeserializer(type: {{classname}}.self) { (source: AnyObject) -> {{classname}} in
                {{^hasVars}}return {{classname}}(){{/hasVars}}{{#hasVars}}let dict = source as! [NSObject:AnyObject]

                let data = {{classname}}(){{#vars}}{{#isEnum}}
                data.{{name}} = {{classname}}.{{datatypeWithEnum}}(rawValue: (dict["{{name}}"] as? String) ?? ""){{#unwrapRequired}}{{#required}}!{{/required}}{{/unwrapRequired}} {{/isEnum}}{{^isEnum}}
                data.{{name}} = JsonDeserializers.deserialize{{^unwrapRequired}}Optional{{/unwrapRequired}}{{#unwrapRequired}}{{^required}}Optional{{/required}}{{/unwrapRequired}}(type: {{baseType}}.self, source: dict["{{name}}"]{{#unwrapRequired}}{{#required}}!{{/required}}{{/unwrapRequired}}){{/isEnum}}{{/vars}}

                return data{{/hasVars}}
            }

            // [{{classname}}]
            JsonDeserializers.addDeserializer(type: [{{classname}}].self) { (source: AnyObject) -> [{{classname}}] in
                return JsonDeserializers.deserialize(type: [{{classname}}].self, source: source)
            }
            {{/model}}{{/models}}
        }
    }
}