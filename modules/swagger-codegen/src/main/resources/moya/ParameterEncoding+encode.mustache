import Alamofire

extension ParameterEncoding {

    public static func encode(URLRequest: URLRequestConvertible, parameters: [String:AnyObject]?) -> (NSMutableURLRequest, NSError?) {
        let (queryParameters, body, formParameters) = (parameters![Parameters.Query] as! [String:AnyObject], parameters![Parameters.Body] as! [String:AnyObject], parameters![Parameters.Form] as! [String:AnyObject])

        var encodeInURL: Bool {
            get {
                switch URLRequest.URLRequest.HTTPMethod {
                case "GET", "HEAD", "DELETE":
                    return true

                default:
                    return false
                }
            }
        }

        var (mutableURLRequest, encodingError) = ParameterEncoding.URL.encode(URLRequest, parameters: encodeInURL ? queryParameters : formParameters)

        if body.count > 0 {
            do {
                let data = try NSJSONSerialization.dataWithJSONObject(body, options: NSJSONWritingOptions())

                let contentType = mutableURLRequest.valueForHTTPHeaderField("Content-Type")

                if contentType == nil || contentType != "application/json" {
                    mutableURLRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
                }

                mutableURLRequest.HTTPBody = data
            } catch {
                encodingError = error as NSError
            }
        }

        return (mutableURLRequest, encodingError)
    }
}