import Alamofire

extension ParameterEncoding {

    static func encodeURLParametersAndJSONBody(URLRequest: URLRequestConvertible, parameters: [String:AnyObject]?) -> (NSMutableURLRequest, NSError?) {

        func split(parameters: [String:AnyObject]) -> (queryParameters: [String:AnyObject], body: [String:AnyObject]) {
            var queryParameters = [String:AnyObject]()
            var body = [String:AnyObject]()

            for (name, value) in parameters {
                if let data = value as? [String:AnyObject] {
                    body = data
                } else {
                    queryParameters[name] = value
                }
            }

            return (queryParameters: queryParameters, body: body)
        }

        let (params, body) = split(parameters!)

        let (mutableURLRequest, _) = ParameterEncoding.URL.encode(URLRequest, parameters: params)

        var encodingError: NSError? = nil

        do {
            let data = try NSJSONSerialization.dataWithJSONObject(body, options: NSJSONWritingOptions())

            if mutableURLRequest.valueForHTTPHeaderField("Content-Type") == nil {
                mutableURLRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")
            }

            mutableURLRequest.HTTPBody = data
        } catch {
            encodingError = error as NSError
        }

        return (mutableURLRequest, encodingError)
    }
}