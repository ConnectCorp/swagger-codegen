{{#operations}}
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/ConnectCorp/swagger-codegen

import Foundation
import Moya

enum {{classname}} {
    {{#operation}}
        case {{operationId}}{{#hasParams}}({{#allParams}}{{dataType}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){{/hasParams}}
    {{/operation}}
}

let {{classname}}Provider = RxMoyaProvider<{{classname}}>(endpointClosure: { (target: {{classname}}) -> Endpoint<{{classname}}> in
    let endpoint = Endpoint<{{classname}}>(
        URL: target.baseURL.URLByAppendingPathComponent(target.path).absoluteString,

        sampleResponseClosure: { .NetworkResponse(200, target.sampleData) },

        method: target.method,

        parameters: target.parameters
    )

    var parameterEncoding: ParameterEncoding {
        switch target {
        {{#operation}}
        case .{{operationId}}:
            return .{{^hasQueryParams}}{{^hasPathParams}}{{^hasBodyParam}}URL{{/hasBodyParam}}{{/hasPathParams}}{{/hasQueryParams}}{{#hasBodyParam}}{{^hasPathParams}}{{^hasQueryParams}}JSON{{/hasQueryParams}}{{/hasPathParams}}{{/hasBodyParam}}{{#hasQueryParams}}{{^hasBodyParam}}{{^hasPathParams}}URL{{/hasPathParams}}{{/hasBodyParam}}{{#hasBodyParam}}Custom(ParameterEncoding.encodeURLParametersAndJSONBody){{/hasBodyParam}}{{/hasQueryParams}}{{#hasPathParams}}{{#hasBodyParam}}JSON{{/hasBodyParam}}{{^hasBodyParam}}URL{{/hasBodyParam}}{{/hasPathParams}}
        {{/operation}}
        }
    }

    return endpoint.endpointByAddingParameterEncoding(parameterEncoding)
})

extension {{classname}}: TargetType {

    var baseURL: NSURL { return NSURL(string: "{{basePath}}")! }

    var path: String {
        switch self {
        {{#operation}}
        case .{{operationId}}{{#hasParams}}({{#allParams}}let {{#isPathParam}}{{paramName}}{{/isPathParam}}{{^isPathParam}}_{{/isPathParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){{/hasParams}}:
            return "{{path}}"
        {{/operation}}
        }
    }

    var method: Moya.Method {
        switch self {
        {{#operation}}
        case .{{operationId}}:
            return .{{httpMethod}}
        {{/operation}}
        }
    }

    var parameters: [String:AnyObject]? {
        switch self {
        {{#operation}}
        case .{{operationId}}{{#hasParams}}({{#allParams}}let {{#isPathParam}}_{{/isPathParam}}{{^isPathParam}}{{paramName}}{{/isPathParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){{/hasParams}}:
            return {{#hasBodyParam}}{{#hasQueryParams}}{{#allParams}}{{^secondaryParam}}[{{/secondaryParam}}
                {{#isQueryParam}}"{{paramName}}": {{paramName}}{{/isQueryParam}}{{#isBodyParam}}"=": {{paramName}}.encodeToJSON() as! [String:AnyObject]{{/isBodyParam}}{{#hasMore}},{{/hasMore}}{{^hasMore}}
            ]{{/hasMore}}{{/allParams}}{{/hasQueryParams}}{{/hasBodyParam}}{{#hasBodyParam}}{{^hasQueryParams}}{{#allParams}}{{#isBodyParam}}{{paramName}}.encodeToJSON() as! [String:AnyObject]{{/isBodyParam}}{{/allParams}}{{/hasQueryParams}}{{/hasBodyParam}}{{^hasBodyParam}}{{^queryParams}}{{^formParams}}[:]{{/formParams}}{{#formParams}}{{^secondaryParam}}[{{/secondaryParam}}
                "{{paramName}}": {{paramName}}{{#hasMore}},{{/hasMore}}{{^hasMore}}
            ]{{/hasMore}}{{/formParams}}{{/queryParams}}{{#queryParams}}{{^secondaryParam}}[{{/secondaryParam}}
                "{{paramName}}": {{paramName}}{{#hasMore}},{{/hasMore}}{{^hasMore}}
            ]{{/hasMore}}{{/queryParams}}{{/hasBodyParam}}
        {{/operation}}
        }
    }

    var sampleData: NSData {
        switch self {
        {{#operation}}
        case .{{operationId}}:
            return "{{#examples}}{{{example}}}{{/examples}}".dataUsingEncoding(NSUTF8StringEncoding)!
        {{/operation}}
        }
    }
}
{{/operations}}
