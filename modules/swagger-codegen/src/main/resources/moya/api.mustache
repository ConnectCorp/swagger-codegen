{{#operations}}
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/ConnectCorp/swagger-codegen

import Foundation
import Moya

enum {{classname}} {
    {{#operation}}
        case {{operationId}}{{#hasParams}}({{#allParams}}{{dataType}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){{/hasParams}}
    {{/operation}}
}

let {{classname}}Provider = RxMoyaProvider<{{classname}}>(endpointClosure: { (target: {{classname}}) -> Endpoint<{{classname}}> in
    let endpoint = Endpoint<{{classname}}>(
        URL: target.baseURL.URLByAppendingPathComponent(target.path).absoluteString,

        sampleResponseClosure: { .NetworkResponse(200, target.sampleData) },

        method: target.method,

        parameters: target.parameters
    )

    var parameterEncoding: ParameterEncoding {
        return .Custom(ParameterEncoding.encode)
    }

    var headers: [String:String] {
        get {
            var data = [String:String]()

            for (key, value) in (target.parameters![Parameters.Headers] as! [String:AnyObject]) {
                data[key] = String(value)
            }

            return data
        }
    }

    return endpoint.endpointByAddingParameterEncoding(parameterEncoding)
        .endpointByAddingHTTPHeaderFields(headers)
})

extension {{classname}}: TargetType {

    var baseURL: NSURL { return NSURL(string: "{{basePath}}")! }

    var path: String {
        switch self {
        {{#operation}}
        case .{{operationId}}{{#hasParams}}({{#allParams}}{{#isPathParam}}let {{paramName}}{{/isPathParam}}{{^isPathParam}}_{{/isPathParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){{/hasParams}}:
            return "{{path}}"
        {{/operation}}
        }
    }

    var method: Moya.Method {
        switch self {
        {{#operation}}
        case .{{operationId}}:
            return .{{httpMethod}}
        {{/operation}}
        }
    }

    var parameters: [String:AnyObject]? {
        switch self {
        {{#operation}}
        case .{{operationId}}{{#hasParams}}({{#allParams}}{{#isPathParam}}_{{/isPathParam}}{{^isPathParam}}let {{paramName}}{{/isPathParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){{/hasParams}}:
            return [
                Parameters.Headers: {{^hasHeaderParams}}[:]{{/hasHeaderParams}}{{#hasHeaderParams}}[
                    {{#headerParams}}{{^secondaryParam}}{{/secondaryParam}}"{{paramName}}": {{paramName}}{{#hasMore}},
                    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/headerParams}}{{/hasHeaderParams}},
                Parameters.Query: {{^hasQueryParams}}[:]{{/hasQueryParams}}{{#hasQueryParams}}[
                    {{#queryParams}}{{^secondaryParam}}{{/secondaryParam}}"{{paramName}}": {{paramName}}{{#hasMore}},
                    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/queryParams}}{{/hasQueryParams}},
                Parameters.Body: {{^hasBodyParam}}[:]{{/hasBodyParam}}{{#hasBodyParam}}{{#bodyParams}}{{paramName}}.encodeToJSON(){{/bodyParams}}{{/hasBodyParam}},
                Parameters.Form: {{^hasFormParams}}[:]{{/hasFormParams}}{{#hasFormParams}}[
                    {{#formParams}}{{^secondaryParam}}{{/secondaryParam}}"{{paramName}}": {{paramName}}{{#hasMore}},
                    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/formParams}}{{/hasFormParams}}
        {{/operation}}
        }
    }

    var sampleData: NSData {
        switch self {
        {{#operation}}
        case .{{operationId}}:
            return "{{#examples}}{{{example}}}{{/examples}}".dataUsingEncoding(NSUTF8StringEncoding)!
        {{/operation}}
        }
    }
}
{{/operations}}
