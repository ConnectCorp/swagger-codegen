{{#operations}}
// {{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/ConnectCorp/swagger-codegen

import Foundation
import Moya

public enum {{classname}} {
{{#operation}}
    case {{operationId}}{{#hasParams}}({{#allParams}}{{paramName}}: {{dataType}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){{/hasParams}}

{{/operation}}
}

public class {{classname}}ProviderBuilder {

    public typealias EndpointTransformer = Endpoint<{{classname}}> -> Endpoint<{{classname}}>

    public typealias EndpointClosure = {{classname}} -> Endpoint<{{classname}}>

    public typealias RequestClosure = (Endpoint<{{classname}}>, NSURLRequest -> Void) -> Void

    public typealias StubClosure = {{classname}} -> Moya.StubBehavior

    public static func build(endpointTransformer: EndpointTransformer? = nil,
        requestClosure: RequestClosure = MoyaProvider.DefaultRequestMapping,
        stubClosure: StubClosure = MoyaProvider.NeverStub,
        manager: Manager = MoyaProvider<{{classname}}>.DefaultAlamofireManager(),
        plugins: [PluginType] = []) -> RxMoyaProvider<{{classname}}> {

        var endpointClosure: EndpointClosure = { target in
            let endpoint = Endpoint<{{classname}}>(
                URL: target.baseURL.URLByAppendingPathComponent(target.path).absoluteString,
                sampleResponseClosure: { .NetworkResponse(200, target.sampleData) },
                method: target.method,
                parameters: target.parameters
            )

            var parameterEncoding: ParameterEncoding {
                return .Custom(ParameterEncoding.encode)
            }

            var headers: [String:String] {
                get {
                    var data = [String:String]()

                    for (key, value) in (target.parameters![Parameters.Headers] as! [String:AnyObject]) {
                        data[key] = String(value)
                    }

                    return data
                }
            }

            return endpoint.endpointByAddingParameterEncoding(parameterEncoding)
                .endpointByAddingHTTPHeaderFields(headers)
        }

        if let transformer = endpointTransformer {
            endpointClosure = { transformer(endpointClosure($0)) }
        }

        return RxMoyaProvider<{{classname}}>(endpointClosure: endpointClosure,
            requestClosure: requestClosure,
            stubClosure: stubClosure,
            manager: manager,
            plugins: plugins)
    }
}

extension {{classname}}: TargetType {

    public var baseURL: NSURL { return NSURL(string: "{{basePath}}")! }

    public var path: String {
        switch self {
        {{#operation}}
        case .{{operationId}}{{#hasPathParams}}({{#allParams}}{{#isPathParam}}let {{paramName}}{{/isPathParam}}{{^isPathParam}}_{{/isPathParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){{/hasPathParams}}:
            return "{{path}}"
        {{/operation}}
        }
    }

    public var method: Moya.Method {
        switch self {
        {{#operation}}
        case .{{operationId}}:
            return .{{httpMethod}}
        {{/operation}}
        }
    }

    public var parameters: [String:AnyObject]? {
        switch self {
        {{#operation}}
        case .{{operationId}}{{#hasParams}}({{#allParams}}{{#isPathParam}}_{{/isPathParam}}{{^isPathParam}}let {{paramName}}{{/isPathParam}}{{#hasMore}}, {{/hasMore}}{{/allParams}}){{/hasParams}}:
            return [
                Parameters.Headers: {{^hasHeaderParams}}[:]{{/hasHeaderParams}}{{#hasHeaderParams}}[
                    {{#headerParams}}{{^secondaryParam}}{{/secondaryParam}}"{{paramName}}": {{paramName}}{{#hasMore}},
                    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/headerParams}}{{/hasHeaderParams}},
                Parameters.Query: {{^hasQueryParams}}[:]{{/hasQueryParams}}{{#hasQueryParams}}[
                    {{#queryParams}}{{^secondaryParam}}{{/secondaryParam}}"{{paramName}}": {{paramName}}{{#hasMore}},
                    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/queryParams}}{{/hasQueryParams}},
                Parameters.Body: {{^hasBodyParam}}[:]{{/hasBodyParam}}{{#hasBodyParam}}{{#bodyParams}}{{paramName}}.toJson(){{/bodyParams}}{{/hasBodyParam}},
                Parameters.Form: {{^hasFormParams}}[:]{{/hasFormParams}}{{#hasFormParams}}[
                    {{#formParams}}{{^secondaryParam}}{{/secondaryParam}}"{{paramName}}": {{paramName}}{{#hasMore}},
                    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/formParams}}{{/hasFormParams}}
            ]
        {{/operation}}
        }
    }

    public var sampleData: NSData {
        switch self {
        {{#operation}}
        case .{{operationId}}:
            return "{{#examples}}{{{example}}}{{/examples}}".dataUsingEncoding(NSUTF8StringEncoding)!
        {{/operation}}
        }
    }
}
{{/operations}}
