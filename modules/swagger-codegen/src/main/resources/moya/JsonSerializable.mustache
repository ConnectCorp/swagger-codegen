// JsonSerializable.swift
//
// Generated by swagger-codegen
// https://github.com/ConnectCorp/swagger-codegen
//

import Foundation

public protocol JsonSerializable {
    func toJson() -> AnyObject
}

extension Bool: JsonSerializable {
    public func toJson() -> AnyObject {
        return self
    }
}

extension Float: JsonSerializable {
    public func toJson() -> AnyObject {
        return self
    }
}

extension Int: JsonSerializable {
    public func toJson() -> AnyObject {
        return self
    }
}

extension Double: JsonSerializable {
    public func toJson() -> AnyObject {
        return self
    }
}

extension String: JsonSerializable {
    public func toJson() -> AnyObject {
        return self
    }
}

extension Array: JsonSerializable {
    public func toJson() -> AnyObject {
        return self.map(jsonify)
    }
}

extension Dictionary: JsonSerializable {
    public func toJson() -> AnyObject {
        var dict = [NSObject:AnyObject]()

        for (key, value) in self {
            dict[key as! NSObject] = jsonify(value)
        }

        return dict
    }
}

extension NSDate: JsonSerializable {
    public func toJson() -> AnyObject {
        let formatter = NSDateFormatter()
        formatter.dateFormat = "yyyy-MM-dd"

        return formatter.stringFromDate(self)
    }
}

private func jsonify<T>(object: T) -> AnyObject {
    if object is JsonSerializable {
        return (object as! JsonSerializable).toJson()
    }

    return object as! AnyObject
}
