//
// Generated by swagger-codegen, do not edit!
// https://github.com/ConnectCorp/swagger-codegen
//
import Alamofire
import NSObject_Rx
import RxCocoa
import RxSwift

{{#operations}}public class {{classname}} : NSObject, {{#generateDataAPI}}CRUD{{/generateDataAPI}}API { {{#generateDataAPI}}
    public typealias ModelType = {{baseName}}
    public typealias CountType = {{countReturnType}}
    public typealias DeleteType = {{deleteReturnType}}{{/generateDataAPI}}

    let authenticator = RequestAuthenticator()

    let baseURLSubject:Variable<NSURL>

    public let manager:Manager

    public var baseURL:NSURL {
        return baseURLSubject.value
    }

    public init(manager:Manager, baseURL:Observable<NSURL>, initialBaseURL:NSURL = NSURL(string: "{{basePath}}")!) {
        self.manager = manager
        self.baseURLSubject = Variable(initialBaseURL)

        super.init()

        baseURL.shareReplay(1).bindTo(baseURLSubject).addDisposableTo(rx_disposeBag)
    }

    public var resourcePath:String? {
        return {{#resourcePath}}"{{{resourcePath}}}"{{/resourcePath}}{{^resourcePath}}nil{{/resourcePath}}
    }

{{#operation}}
    public func {{operationId}}({{#hasParams}}{{#allParams}}{{paramName}}:{{dataType}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{/hasParams}}) throws -> Observable<{{#successfulResponse}}{{dataType}}{{/successfulResponse}}> {
        return try request{{#successfulResponse}}{{^isListContainer}}Single{{/isListContainer}}{{#isListContainer}}Array{{/isListContainer}}{{/successfulResponse}}(
            .{{httpMethod}}{{#hasPath}},
            path: "{{path}}"{{/hasPath}}{{#hasHTTPParams}},
            params: Parameters(
                {{#hasQueryParams}}query: [
    {{#queryParams}}{{^secondaryParam}}{{/secondaryParam}}                "{{baseName}}" : {{paramName}}{{#hasMore}},
    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/queryParams}}{{/hasQueryParams}}{{#hasFormParams}}{{#hasQueryParams}},
            {{/hasQueryParams}}form: [
    {{#formParams}}{{^secondaryParam}}{{/secondaryParam}}                "{{baseName}}" : {{paramName}}{{#hasMore}},
    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/formParams}}{{/hasFormParams}}{{#hasHeaderParams}}{{#hasFormParams}}{{^hasQueryParams}},
            {{/hasQueryParams}}{{#hasQueryParams}},
            {{/hasQueryParams}}{{/hasFormParams}}headers: [
    {{#headerParams}}{{^secondaryParam}}{{/secondaryParam}}                "{{baseName}}" : {{paramName}}{{#hasMore}},
    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/headerParams}}{{/hasHeaderParams}}
            ){{/hasHTTPParams}}{{#hasAuthMethods}},
            transformers: [authenticator.with(methods: [{{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}])]{{/hasAuthMethods}}{{#hasBodyParam}},
            {{#bodyParam}}body: { return {{paramName}}.toJSON() }{{/bodyParam}}{{/hasBodyParam}}
        )
    }{{#hasMore}}
{{/hasMore}}

{{/operation}}{{#generateDataAPI}}{{^hasCreate}}
    public func create(data:{{baseName}}) throws -> Observable<{{baseName}}> {
        throw UnsupportedOperation()
    }
{{/hasCreate}}{{^hasUpsert}}
    public func upsert(data:{{baseName}}) throws -> Observable<{{baseName}}> {
        throw UnsupportedOperation()
    }
{{/hasUpsert}}{{^hasFindById}}
    public func findById(id:String, filter:String) throws -> Observable<{{baseName}}> {
        throw UnsupportedOperation()
    }
{{/hasFindById}}{{^hasFindOne}}
    public func findOne(filter:String) throws -> Observable<{{baseName}}> {
        throw UnsupportedOperation()
    }
{{/hasFindOne}}{{^hasFind}}
    public func find(filter:String) throws -> Observable<[{{baseName}}]> {
        throw UnsupportedOperation()
    }
{{/hasFind}}{{^hasCount}}
    public func count(filter:String) throws -> Observable<{{countReturnType}}> {
        throw UnsupportedOperation()
    }
{{/hasCount}}{{^hasDeleteById}}
    public func deleteById(id:String) throws -> Observable<{{deleteReturnType}}> {
        throw UnsupportedOperation()
    }
{{/hasDeleteById}}{{/generateDataAPI}}
}
{{/operations}}
