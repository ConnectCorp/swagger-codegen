import Alamofire
import RxSwift

{{#operations}}public class {{classname}} : API { {{#generateDataRepository}}
    public typealias ModelType = {{baseName}}
    public typealias CountType = {{countReturnType}}
    public typealias DeleteType = {{deleteReturnType}}{{/generateDataRepository}}

    let authenticator = RequestAuthenticator()

    public let manager:Manager

    public init(manager:Manager) {
        self.manager = manager
    }

    public var baseURL:NSURL {
        return NSURL(string: "{{basePath}}")!
    }

    public var resourcePath:String? {
        return "{{resourcePath}}"
    }

{{#operation}}
    public func {{operationId}}({{#hasParams}}{{#allParams}}{{paramName}}:{{dataType}}{{#hasMore}}, {{/hasMore}}{{/allParams}}{{/hasParams}}) throws -> Observable<{{#successfulResponse}}{{dataType}}{{/successfulResponse}}> {
        return try request{{#successfulResponse}}{{^isListContainer}}Single{{/isListContainer}}{{#isListContainer}}Array{{/isListContainer}}{{/successfulResponse}}(
            .{{httpMethod}}{{#hasPath}},
            path: "{{path}}"{{/hasPath}}{{#hasHTTPParams}},
            params: Parameters(
                {{#hasQueryParams}}query: [
    {{#queryParams}}{{^secondaryParam}}{{/secondaryParam}}                "{{paramName}}" : {{paramName}}{{#hasMore}},
    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/queryParams}}{{/hasQueryParams}}{{#hasFormParams}}{{#hasQueryParams}},
            {{/hasQueryParams}}form: [
    {{#formParams}}{{^secondaryParam}}{{/secondaryParam}}                "{{paramName}}" : {{paramName}}{{#hasMore}},
    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/formParams}}{{/hasFormParams}}{{#hasHeaderParams}}{{#hasFormParams}}{{^hasQueryParams}},
            {{/hasQueryParams}}{{#hasQueryParams}},
            {{/hasQueryParams}}{{/hasFormParams}}headers: [
    {{#headerParams}}{{^secondaryParam}}{{/secondaryParam}}                "{{paramName}}" : {{paramName}}{{#hasMore}},
    {{/hasMore}}{{^hasMore}}
                ]{{/hasMore}}{{/headerParams}}{{/hasHeaderParams}}
            ){{/hasHTTPParams}}{{#hasAuthMethods}},
            transformers: [authenticator.with(methods: [{{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}])]{{/hasAuthMethods}}{{#hasBodyParam}},
            {{#bodyParam}}body: { return {{paramName}}.toJSON() }{{/bodyParam}}{{/hasBodyParam}}
        )
    }{{#hasMore}}
    {{/hasMore}}
{{/operation}}
}
{{/operations}}
