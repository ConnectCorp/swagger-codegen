//
// Generated by swagger-codegen, do not edit!
// https://github.com/ConnectCorp/swagger-codegen
//
//  Copyright Â© 2016 Connect. All rights reserved.
//

{{#models}}{{#model}}import ObjectMapper
{{#useRealm}}
import Realm
import RealmSwift
{{/useRealm}}

public class {{classname}} : {{#useRealm}}Object, {{/useRealm}}Mappable { {{#vars}}{{#isEnum}}
    public enum {{datatypeWithEnum}} : String { {{#allowableValues}}{{#values}}
        case {{enum}} = "{{raw}}"{{/values}}{{/allowableValues}}
    }
{{/isEnum}}{{/vars}}{{#vars}}{{#useRealm}}
    private{{#isNumeric}}{{#required}} dynamic{{/required}}{{/isNumeric}}{{^isNumeric}}{{^isListContainer}} dynamic{{/isListContainer}}{{/isNumeric}} var _{{name}}{{#isNumeric}}{{#required}}: {{datatype}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/required}}{{^required}} = RealmOptional<{{datatype}}>({{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}){{/required}}{{/isNumeric}}{{^isNumeric}}{{#isListContainer}} = List<{{#items}}{{#isPrimitiveType}}Realm{{/isPrimitiveType}}{{datatype}}{{/items}}>(){{/isListContainer}}{{^isListContainer}}: {{{datatype}}}{{^required}}?{{/required}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/isListContainer}}{{/isNumeric}}

    {{^isRaw}}public var {{name}}: {{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{datatype}}{{/isEnum}}{{^required}}{{^isListContainer}}?{{/isListContainer}}{{/required}} {
        get {
            return {{#isEnum}}{{datatypeWithEnum}}(rawValue: _{{name}}{{^required}} ?? ""{{/required}}){{#required}}!{{/required}}{{/isEnum}}{{^isEnum}}{{#isListContainer}}Array(_{{#items}}{{name}}{{#isPrimitiveType}}.map { $0.value }{{/isPrimitiveType}}{{/items}}){{/isListContainer}}{{^isListContainer}}_{{name}}{{#isNumeric}}{{^required}}.value{{/required}}{{/isNumeric}}{{/isListContainer}}{{/isEnum}}
        }

        set {
            {{#isId}}if realm == nil {
                _{{name}}{{#isNumeric}}{{^required}}.value{{/required}}{{/isNumeric}} = {{#isListContainer}}List(newValue){{/isListContainer}}{{^isListContainer}}newValue{{/isListContainer}}
            }{{/isId}}{{^isId}}if let realm = realm {
                try! realm.write { [weak self] in self?._{{name}}{{#isNumeric}}{{^required}}.value{{/required}}{{/isNumeric}} = {{#isEnum}}newValue{{^required}}?{{/required}}.rawValue{{/isEnum}}{{^isEnum}}{{#isListContainer}}{{#items}}{{^isPrimitiveType}}List(newValue){{/isPrimitiveType}}{{#isPrimitiveType}}List(newValue.map { primitive in
                        var wrapped = Realm{{datatype}}()
                        wrapped.value = primitive
                        return wrapped
                    })
                {{/isPrimitiveType}}{{/items}}{{/isListContainer}}{{^isListContainer}}newValue{{/isListContainer}}{{/isEnum}} }
                return
            }

            _{{name}}{{#isNumeric}}{{^required}}.value{{/required}}{{/isNumeric}} = {{#isEnum}}newValue{{^required}}?{{/required}}.rawValue{{/isEnum}}{{^isEnum}}{{#isListContainer}}{{#items}}{{^isPrimitiveType}}List(newValue){{/isPrimitiveType}}{{#isPrimitiveType}}List(newValue.map { primitive in
                var wrapped = Realm{{datatype}}()
                wrapped.value = primitive
                return wrapped
            }){{/isPrimitiveType}}{{/items}}{{/isListContainer}}{{^isListContainer}}newValue{{/isListContainer}}{{/isEnum}}{{/isId}}
        }
    }{{/isRaw}}{{#isRaw}}public var {{name}}: [String : AnyObject]? {
        get {
            guard let _{{name}} = _{{name}} else { return [ : ] }

            return _{{name}}.toJSON()
        }

        set {
            guard let value = newValue else { _{{name}} = nil ; return }

            if let realm = realm {
                try! realm.write { [weak self] in
                    self?._{{name}} = NSData.fromJSON(value)
                }

                return
            }

            _{{name}} = NSData.fromJSON(value)
        }
    }{{/isRaw}}{{#hasMore}}
{{/hasMore}}{{/useRealm}}{{^useRealm}}
    public var {{name}}:{{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{datatype}}{{/isEnum}}?{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}
{{/useRealm}}{{/vars}}

    public {{#useRealm}}override {{/useRealm}}var description: String {
        return "{{classname}}({{#vars}}\n    {{name}}: \({{name}}){{#hasMore}},{{/hasMore}}{{^hasMore}}\n{{/hasMore}}{{/vars}})"
    }{{#useRealm}}{{#hasId}}

    public override static func primaryKey() -> String? {
        return "_{{realmPrimaryKey}}"
    }{{/hasId}}{{#useRealm}}

    public override static func ignoredProperties() -> [String] {
        return [{{#vars}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/vars}}]
    }{{/useRealm}}

    public required init() {
        super.init()
    }

    public required init(value: AnyObject, schema: RLMSchema) {
        super.init(value: value, schema: schema)
    }

    public required init(realm: RLMRealm, schema: RLMObjectSchema) {
        super.init(realm: realm, schema: schema)
    }{{/useRealm}}{{^useRealm}}

    public init({{#vars}}{{name}}:{{#isEnum}}{{datatypeWithEnum}}{{/isEnum}}{{^isEnum}}{{datatype}}{{/isEnum}}? = {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}nil{{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/vars}}) {
        {{#vars}}self.{{name}} = {{name}}{{#hasMore}}
        {{/hasMore}}{{/vars}}
    }{{/useRealm}}

    public required convenience init?(_ map: Map) {
        self.init()
    }

    public func mapping(map: Map) {
        {{^useRealm}}{{#vars}}{{name}} <- {{^isDate}}map["{{baseName}}"]{{/isDate}}{{#isDate}}(map["{{baseName}}"], ISO8601ExtendedDateTransform()){{/isDate}}{{#hasMore}}
        {{/hasMore}}{{/vars}}{{/useRealm}}{{#useRealm}}var inWriteTransaction = false

        if let realm = realm where !(realm.inWriteTransaction) {
            inWriteTransaction = true
            realm.beginWrite()
        }

        defer {
            if let realm = realm where realm.inWriteTransaction {
                if inWriteTransaction {
                    if map.mappingType == .FromJSON {
                        try! realm.commitWrite()
                    } else {
                       try! realm.cancelWrite()
                    }
                }
            }
        }
{{#vars}}{{^isRaw}}{{^isId}}
        {{^isListContainer}}{{^isNumeric}}{{^isDate}}_{{name}} <- map["{{baseName}}"]{{/isDate}}{{#isDate}}_{{name}} <- (map["{{baseName}}"], ISO8601ExtendedDateTransform()){{/isDate}}{{/isNumeric}}{{#isNumeric}}{{#required}}_{{name}} <- map["{{baseName}}"]{{/required}}{{^required}}_{{name}} <- (map["{{baseName}}"], RealmOptionalTransform<{{datatype}}>()){{/required}}{{/isNumeric}}{{/isListContainer}}{{#isListContainer}}{{#items}}{{^isPrimitiveType}}_{{name}} <- (map["{{baseName}}"], RealmListTransform<{{datatype}}>()){{/isPrimitiveType}}{{#isPrimitiveType}}_{{name}} <- (map["{{baseName}}"], Realm{{datatype}}ListTransform()){{/isPrimitiveType}}{{/items}}{{/isListContainer}}{{/isId}}{{#isId}}
        {{name}} <- map["{{baseName}}"]{{/isId}}{{/isRaw}}{{#isRaw}}

        switch map.mappingType {
        case .ToJSON:
            var json = _{{name}}?.toJSON()
            json <- map["{{name}}"]

        case .FromJSON:
            var json: [String : AnyObject] = [ : ]
            json <- map["{{name}}"]

            _{{name}} = NSData.fromJSON(json)
        }
{{/isRaw}}{{#hasMore}}{{/hasMore}}{{/vars}}{{/useRealm}}
    }
}
{{/model}}
{{/models}}
