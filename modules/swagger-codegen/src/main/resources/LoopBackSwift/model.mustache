{{#models}}{{#model}}import ObjectMapper
{{#useRealm}}
import Realm
import RealmSwift
{{/useRealm}}

public class {{classname}} : {{#useRealm}}Object, {{/useRealm}}Mappable, CustomStringConvertible {
{{#vars}}{{#isEnum}}
    public enum {{datatypeWithEnum}}: String { {{#allowableValues}}{{#values}}
        case {{enum}} = "{{raw}}"{{/values}}{{/allowableValues}}
    }
{{/isEnum}}{{/vars}}
{{#vars}}{{#isEnum}}    public var {{name}}: {{{datatypeWithEnum}}}?{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/isEnum}}{{^isEnum}}    {{#useRealm}}public{{^isNumeric}} dynamic{{/isNumeric}} var {{name}}{{#isNumeric}} = RealmOptional<{{datatype}}>({{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}){{/isNumeric}}{{^isNumeric}}: {{datatype}}?{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/isNumeric}}{{/useRealm}}{{^useRealm}}public var {{name}}: {{datatype}}?{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{/useRealm}}{{/isEnum}}
{{/vars}}

    public {{#useRealm}}override {{/useRealm}}var description: String {
        return "{{classname}}({{#vars}}\n    {{name}}: \({{name}}){{#hasMore}},{{/hasMore}}{{^hasMore}}\n{{/hasMore}}{{/vars}})"
    }{{#useRealm}}{{#hasId}}

    public override static func primaryKey() -> String? {
        return "{{realmPrimaryKey}}"
    }{{/hasId}}

    public required init() {
        super.init()
    }

    public required init(value: AnyObject, schema: RLMSchema) {
        super.init(value: value, schema: schema)
    }

    public required init(realm: RLMRealm, schema: RLMObjectSchema) {
        super.init(realm: realm, schema: schema)
    }{{/useRealm}}{{^useRealm}}

    public init({{#vars}}{{name}}: {{datatype}}? = {{#defaultValue}}{{{defaultValue}}}{{/defaultValue}}{{^defaultValue}}nil{{/defaultValue}}{{#hasMore}}, {{/hasMore}}{{/vars}}) {
        {{#vars}}self.{{name}} = {{name}}{{#hasMore}}
        {{/hasMore}}{{/vars}}
    }{{/useRealm}}

    public required convenience init?(_ map: Map) {
        self.init()
    }

    public func mapping(map: Map) {
        {{#vars}}{{name}} <- map["{{name}}"]{{#hasMore}}
        {{/hasMore}}{{/vars}}
    }
}
{{/model}}
{{/models}}
