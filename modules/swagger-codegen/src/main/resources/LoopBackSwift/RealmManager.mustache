import Foundation
import RealmSwift

public class RealmManager {

    static func pathToRealmFile() -> String {
        let docsDirectory = NSSearchPathForDirectoriesInDomains(.DocumentDirectory, .UserDomainMask, true)[0] as NSString
        return docsDirectory.stringByAppendingPathComponent("connect-realm.rlm")
    }

    let realm:Realm

    public init() throws {
        do {
            let path = self.dynamicType.pathToRealmFile()
            let configuration = Realm.Configuration(path: path, inMemoryIdentifier: nil, encryptionKey: nil, readOnly: false, schemaVersion: 1, migrationBlock: nil, objectTypes: nil)
            realm = try Realm(configuration: configuration)
        } catch {
            throw error
        }
    }

    private func doTransaction(action:dispatch_block_t) {
        do {
            try realm.write(action)
        } catch {
            print("Error committing write op: \(error)")
        }
    }

    private func doTransaction(objects:[Object], closure:Object -> Void) {
        doTransaction {
            objects.forEach(closure)
        }
    }

    public func save(object:Object, update:Bool) {
        save([object], update: update)
    }

    public func save(objects:[Object], update:Bool) {
        doTransaction(objects) { (o:Object) in
            self.realm.add(o, update:update)
        }
    }

    public func findById<T : Object>(type:T.Type, id:AnyObject) -> T? {
        return realm.objectForPrimaryKey(type, key: id)
    }

    public func findOne<T : Object>(type:T.Type, predicate:NSPredicate) -> T? {
        return realm.objects(type).filter(predicate).first
    }

    public func find<T : Object>(type:T.Type, predicate:NSPredicate) -> [T]? {
        // TODO: Consider the performance ramifications of firing faults here.

        return Array(realm
        .objects(type)
        .filter(predicate))
    }

    public func delete(object:Object) {
        delete([object])
    }

    public func delete(objects:[Object]) {
        doTransaction(objects) { (o:Object) in
            self.realm.delete(o)
        }
    }

    public func deleteAll(ofClass clazz:Object.Type) {
        let resultsOfType = realm.objects(clazz)

        doTransaction {
            self.realm.delete(resultsOfType)
        }
    }

    public func deleteAll() {
        doTransaction {
            self.realm.deleteAll()
        }
    }

    public func update(updateClosure:dispatch_block_t) {
        doTransaction(updateClosure)
    }
}
