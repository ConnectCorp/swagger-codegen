//
// Generated by swagger-codegen, do not edit!
// https://github.com/ConnectCorp/swagger-codegen
//
import Foundation
import Alamofire
import ObjectMapper
import RxSwift

extension Dictionary {
    public mutating func unionInPlace(dictionary: Dictionary) {
        dictionary.forEach { self.updateValue($1, forKey: $0) }
    }

    public func union(inout dictionary: Dictionary) -> Dictionary {
        dictionary.unionInPlace(self)
        return dictionary
    }
}

extension Manager {
    public func JSONRequest(URL:URLRequestConvertible, method:Alamofire.Method, parameters:Parameters? = nil, body:JSONBodyBuilderClosure? = nil) throws -> Observable<Request> {
        var mutableRequest = URL.URLRequest
        mutableRequest.HTTPMethod = method.rawValue

        if let parameters = parameters {
            mutableRequest = ParameterEncoding.URLEncodedInURL.encode(mutableRequest, parameters: parameters.query).0
            mutableRequest = ParameterEncoding.URL.encode(mutableRequest, parameters: parameters.form).0
        }

        if let body = body {
            mutableRequest = ParameterEncoding.JSON.encode(mutableRequest, parameters: body()).0
        }

        if let headers = parameters?.headers {
            mutableRequest.allHTTPHeaderFields = headers
        }

        return self.rx_request(mutableRequest)
    }
}

public protocol RequestTransformer {
    func transform(request: NSMutableURLRequest)
}

public struct Parameters {
    var query:[String : AnyObject]
    var form:[String : AnyObject]
    var headers:[String : String]

    init(query:[String : AnyObject] = [:], form:[String : AnyObject] = [:], headers:[String : String] = [:]) {
        self.query = query
        self.form = form
        self.headers = headers
    }

    mutating func mergeWith(params:Parameters) {
        params.query.union(&self.query)
        params.form.union(&self.form)
        params.headers.union(&self.headers)
    }
}

public typealias JSONBodyBuilderClosure = () -> [String:AnyObject]

public protocol API {
    var manager:Manager { get }

    var baseURL:NSURL { get }

    var resourcePath:String? { get }
}

public protocol CRUDAPI : API {
    associatedtype ModelType
    associatedtype CountType
    associatedtype DeleteType

    func create(data:ModelType) throws -> Observable<ModelType>

    func upsert(data:ModelType) throws -> Observable<ModelType>

    func findById(id:String, filter:String) throws -> Observable<ModelType>

    func findOne(filter:String) throws -> Observable<ModelType>

    func find(filter:String) throws -> Observable<[ModelType]>

    func count(_where:String) throws -> Observable<CountType>

    func deleteById(id:String) throws -> Observable<DeleteType>
}

extension API {
    public var fullBaseURL:NSURL {
        guard let path = resourcePath else {
            return self.baseURL
        }

        return self.baseURL.URLByAppendingPathComponent(path)
    }

    private func request(method:Alamofire.Method,
                         path:String = "",
                         params:Parameters? = nil,
                         transformers:[RequestTransformer] = [],
                         body:JSONBodyBuilderClosure? = nil) throws -> Observable<Request> {
        let URL = fullBaseURL.URLByAppendingPathComponent(path)
        let request = NSMutableURLRequest(URL: URL)

        transformers.forEach { $0.transform(request) }

        return try manager.JSONRequest(request, method: method, parameters: params, body: body)
    }

    public func requestSingle(method:Alamofire.Method,
                              path:String = "",
                              params:Parameters? = nil,
                              transformers:[RequestTransformer] = [],
                              body:JSONBodyBuilderClosure? = nil)
            throws -> Observable<String> {
        return try request(method, path: path, params: params, transformers: transformers, body: body)
                    .map { request in
                        request.resume()
                        return request
                    }.mapString().map { return $0.0 }
    }

    public func requestSingle<T : Mappable>(method:Alamofire.Method,
                                            path:String = "",
                                            params:Parameters? = nil,
                                            mappingFromKeyPath mappingKeyPath:String? = nil,
                                            mappingToObject destinationObject:T? = nil,
                                            transformers:[RequestTransformer] = [],
                                            body:JSONBodyBuilderClosure? = nil)
            throws -> Observable<T> {
        return try request(method, path: path, params: params, transformers: transformers, body: body)
                    .map { request in
                        request.resume()
                        return request
                    }.mapObject(mappingKeyPath, toObject:destinationObject).map { return $0.0 }
    }

    public func requestArray<T : Mappable>(method:Alamofire.Method,
                                           path:String = "",
                                           params:Parameters? = nil,
                                           mappingFromKeyPath mappingKeyPath:String? = nil,
                                           transformers:[RequestTransformer] = [],
                                           body:JSONBodyBuilderClosure? = nil)
            throws -> Observable<[T]> {
        return try request(method, path: path, params: params, transformers: transformers, body: body)
                    .map { request in
                        request.resume()
                        return request
                    }.mapArray(mappingKeyPath).map { return $0.0 }
    }
}